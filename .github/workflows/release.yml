name: build-and-release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    name: build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Build executable (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pyinstaller --noconsole --onefile --name BudgetManager budget_manager_gui.py
          $Artifact = "BudgetManager-windows-${{ runner.arch }}.zip"
          Compress-Archive -Path "dist/BudgetManager.exe" -DestinationPath $Artifact -Force
          echo "ARTIFACT_NAME=$Artifact" >> $env:GITHUB_ENV
      - name: Build executable (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          pyinstaller --windowed --onefile --name BudgetManager budget_manager_gui.py
          ARTIFACT="BudgetManager-linux-${{ runner.arch }}.tar.gz"
          tar -C dist -czf "$ARTIFACT" BudgetManager
          echo "ARTIFACT_NAME=$ARTIFACT" >> $GITHUB_ENV
      - name: Build executable (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          pyinstaller --windowed --onefile --name BudgetManager budget_manager_gui.py
          ARTIFACT="BudgetManager-macos-${{ runner.arch }}.zip"
          (cd dist && zip -9 -r "../$ARTIFACT" BudgetManager)
          echo "ARTIFACT_NAME=$ARTIFACT" >> $GITHUB_ENV
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}
          if-no-files-found: error

  release:
    name: create release
    needs: build
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.prep.outputs.tag }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true
      - name: Prepare tag
        id: prep
        shell: bash
        run: |
          DATE=$(date +'%Y%m%d-%H%M')
          SHORT_SHA=${GITHUB_SHA::7}
          echo "tag=v${DATE}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "name=Budget Manager ${DATE}-${SHORT_SHA}" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.prep.outputs.tag }}
          name: ${{ steps.prep.outputs.name }}
          body: |
            Automated build from main: ${{ github.sha }}

            - Windows: BudgetManager-windows-${{ runner.arch }}.zip
            - Linux: BudgetManager-linux-${{ runner.arch }}.tar.gz
            - macOS: BudgetManager-macos-${{ runner.arch }}.zip

            Notes:
            - macOS builds are unsigned; you may need to allow them in System Settings > Privacy & Security (Open Anyway).
            - On Linux, extract the tar.gz and run `chmod +x BudgetManager` before launching.
          generate_release_notes: true
          draft: false
          prerelease: true
          files: |
            artifacts/BudgetManager-*

  mobile:
    name: build mobile (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Briefcase
        run: |
          python -m pip install --upgrade pip
          pip install briefcase==0.3.20
      - name: Setup Java (Linux)
        if: runner.os == 'Linux'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build Android (Ubuntu)
        if: runner.os == 'Linux'
        working-directory: mobile
        run: |
          set -e
          briefcase create android -v || echo "briefcase create failed; continuing if project exists"
          briefcase update android -v || echo "briefcase update failed; continuing to build"

          # Ensure Material Components dependency is present (safety net)
          GRADLE_APP="build/budget_manager_mobile/android/gradle/app/build.gradle"
          if [ -f "$GRADLE_APP" ]; then
            # Strip potential UTF-8 BOM
            python - << 'PY'
import sys, io
p = sys.argv[1]
try:
    with open(p, 'rb') as f:
        b = f.read()
    if b.startswith(b"\xef\xbb\xbf"):
        with open(p, 'wb') as f:
            f.write(b[3:])
except Exception as e:
    print(f"WARN: BOM strip failed: {e}")
PY
            "$GRADLE_APP"

            if ! grep -q "com.google.android.material:material" "$GRADLE_APP"; then
              echo "Injecting Material dependency into Gradle (app/build.gradle)"
              awk '1;/dependencies\s*\{/ && !x{print "    implementation \"com.google.android.material:material:1.11.0\""; x=1}' "$GRADLE_APP" > "$GRADLE_APP.tmp" && mv "$GRADLE_APP.tmp" "$GRADLE_APP"
            fi
          fi

          # Build/package
          briefcase build android -v
          briefcase package android -v
          ls -R
          mkdir -p ../artifacts
          find build -type f -name "*.apk" -print -exec cp -v {} ../artifacts/ \; || true
      - name: Build iOS (macOS)
        if: runner.os == 'macOS'
        working-directory: mobile
        run: |
          briefcase create iOS -v
          briefcase build iOS -v
          zip -r ../artifacts/BudgetManager-iOS-Xcode.zip build/budget_manager_mobile/iOS/* || true
      - name: Upload mobile artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mobile-${{ runner.os }}
          path: artifacts/*
          if-no-files-found: ignore

  android-test:
    name: test android apk on emulator
    needs: mobile
    runs-on: ubuntu-latest
    steps:
      - name: Download Android artifact
        uses: actions/download-artifact@v4
        with:
          name: mobile-Linux
          path: apk
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: android-actions/setup-android@v3
      - name: Run emulator and smoke test APK
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          profile: pixel_5
          disk-size: 2048M
          ram-size: 2048M
          emulator-options: -no-snapshot -no-window -gpu swiftshader_indirect
          disable-animations: true
          script: |
            set -e
            APK=$(find apk -type f -name "*.apk" | head -n1)
            echo "APK=$APK"
            if [ -z "$APK" ]; then echo "No APK found"; exit 1; fi
            adb install -r -g "$APK"
            PKG="com.example.budget_manager_mobile"
            # Try to launch via package using monkey
            adb shell monkey -p "$PKG" -c android.intent.category.LAUNCHER 1 || true
            sleep 10
            adb logcat -d | tail -n 2000 > logcat.txt
            # Consider failure only on explicit fatal markers
            if grep -E "FATAL EXCEPTION|Traceback|crash|com\.chaquo\.python\.PyException" -i logcat.txt; then
              echo "Detected crash markers in logcat"; exit 1; fi
      - name: Upload logcat
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-logcat
          path: logcat.txt

  release-mobile:
    name: attach mobile artifacts
    needs: [release, mobile, android-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true
      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.tag }}
          files: |
            artifacts/*.apk
            artifacts/BudgetManager-iOS-Xcode.zip
