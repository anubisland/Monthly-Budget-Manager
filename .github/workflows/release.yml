name: build-and-release

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    name: build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pyinstaller --noconsole --onefile --name BudgetManager budget_manager_gui.py
          $Artifact = "BudgetManager-windows-${{ runner.arch }}.zip"
          Compress-Archive -Path "dist/BudgetManager.exe" -DestinationPath $Artifact -Force
          echo "ARTIFACT_NAME=$Artifact" >> $env:GITHUB_ENV

      - name: Build executable (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          pyinstaller --windowed --onefile --name BudgetManager budget_manager_gui.py
          ARTIFACT="BudgetManager-linux-${{ runner.arch }}.tar.gz"
          tar -C dist -czf "$ARTIFACT" BudgetManager
          echo "ARTIFACT_NAME=$ARTIFACT" >> $GITHUB_ENV

      - name: Build executable (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          pyinstaller --windowed --onefile --name BudgetManager budget_manager_gui.py
          ARTIFACT="BudgetManager-macos-${{ runner.arch }}.zip"
          (cd dist && zip -9 -r "../$ARTIFACT" BudgetManager)
          echo "ARTIFACT_NAME=$ARTIFACT" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}
          if-no-files-found: error

  release:
    name: create release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Prepare tag
        id: prep
        shell: bash
        run: |
          DATE=$(date +'%Y%m%d-%H%M')
          SHORT_SHA=${GITHUB_SHA::7}
          echo "tag=v${DATE}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "name=Budget Manager ${DATE}-${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.prep.outputs.tag }}
          name: ${{ steps.prep.outputs.name }}
          body: |
            Automated build from main: ${{ github.sha }}

            - Windows: BudgetManager-windows-${{ runner.arch }}.zip
            - Linux: BudgetManager-linux-${{ runner.arch }}.tar.gz
            - macOS: BudgetManager-macos-${{ runner.arch }}.zip

            Notes:
            - macOS builds are unsigned; you may need to allow them in System Settings > Privacy & Security (Open Anyway).
            - On Linux, extract the tar.gz and run `chmod +x BudgetManager` before launching.
          generate_release_notes: true
          draft: false
          prerelease: true
          files: |
            artifacts/BudgetManager-*
